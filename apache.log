Web服务器Apache目前一共有三种稳定的MPM（Multi-Processing Module，多进程处理模块）模式。

它们分别是prefork，worker和event，它们同时也代表这Apache的演变和发展。

要求 更高伸缩性的站点可以选择使用线程的 MPM，即 worker 或 event； 需要可靠性或者与旧软件兼容的站点可以使用 prefork。

1、Prefork MPM

Prefork MPM实现了一个非线程的、预派生的web服务器。
它在Apache启动之初，就先预派生一些子进程，然后等待连接；
可以减少频繁创建和销毁进程的开销，每个子进程只有一个线程，在一个时间点内，只能处理一个请求。
这是一个成熟稳定，可以兼容新老模块，也不需要担心线程安全问题，
但是一个进程相对占用资源，消耗大量内存，不擅长处理高并发的场景。


2、Worker MPM

和prefork模式相比，worker使用了多进程和多线程的混合模式，worker模式也同样会先预派生一些子进程，
然后每个子进程创建一些线程，同时包括一个监听线程，
每个请求过来会被分配到一个线程来服务。线程比起进程会更轻量，因为线程是通过共享父进程的内存空间，
因此，内存的占用会减少一些，在高并发的场景下会比prefork有更多可用的线程，表现会更优秀一些；
另外，如果一个线程出现了问题也会导致同一进程下的线程出现问题，如果是多个线程出现问题，
也只是影响Apache的一部分，而不是全部。由于用到多进程多线程，
需要考虑到线程的安全了，在使用keep-alive长连接的时候，某个线程会一直被占用，即使中间没有请求，
需要等待到超时才会被释放（该问题在prefork模式下也存在）。

3、Event MPM

这是Apache最新的工作模式，它和worker模式很像，
不同的是在于它解决了keep-alive长连接的时候占用线程资源被浪费的问题，
在event工作模式中，会有一些专门的线程用来管理这些keep-alive类型的线程，
当有真实请求过来的时候，将请求传递给服务器的线程，执行完毕后，又允许它释放。这增强了在高并发场景下的请求处理。

=============htaccess====================
RewriteRule ^(.*)$ index.php/$1 [QSA,PT,L]

在默认情况下会导致No input file specified.

修改成

RewriteRule ^(.*)$ index.php [L,E=PATH_INFO:$1]
==============end======================